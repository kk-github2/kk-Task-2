{
	"info": {
		"_postman_id": "85a8813d-c40f-4e86-8230-6f5c227535f3",
		"name": "Task 2 - Petstore API automation - KK",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36733497"
	},
	"item": [
		{
			"name": "Create a Pet(Happy path)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();\r",
							"var requestBody = JSON.parse(request.data); \r",
							"\r",
							"//Verify that create request executed successfully\r",
							"pm.test(\"Verify that Pet was created successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify structure of response including all sub-field structures \r",
							"pm.test(\"Check Response structure is valid and includes all mandatory fields\", function () {\r",
							"    pm.expect(responseData).to.have.property(\"id\");\r",
							"    pm.expect(responseData).to.have.property(\"category\");\r",
							"    pm.expect(responseData.category).to.have.property(\"id\");\r",
							"    pm.expect(responseData.category).to.have.property(\"name\");\r",
							"    pm.expect(responseData).to.have.property(\"name\");\r",
							"    pm.expect(responseData).to.have.property(\"photoUrls\");\r",
							"    pm.expect(responseData).to.have.property(\"tags\");\r",
							"    for(var i=0; i < responseData.tags.length; i++){\r",
							"        pm.expect(responseData.tags[i]).to.have.property(\"id\");\r",
							"    }\r",
							"    for(var i=0; i < responseData.tags.length; i++){\r",
							"        pm.expect(responseData.tags[i]).to.have.property(\"name\");\r",
							"    }\r",
							"    pm.expect(responseData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"// Verify values of response\r",
							"pm.test(\"check response values\",function(){\r",
							"    \r",
							"    pm.expect(responseData).to.eql(requestBody);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1504,\r\n  \"category\": {\r\n    \"id\": 15041,\r\n    \"name\": \"Cavoodle\"\r\n  },\r\n  \"name\": \"Cavoodle-mocha\",\r\n  \"photoUrls\": [\r\n    \"sample image\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 15041,\r\n      \"name\": \"CavMoc\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Pet - 500 Error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify that Pet creation fails with 500 server error if junk characters were used\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1504,\r\n  \"category\": {\r\n    \"id\": ##%^#6,\r\n    \"name\": \"Cavoodle\"\r\n  },\r\n  \"name\": \"Cavoodle-mocha\",\r\n  \"photoUrls\": [\r\n    \"sample image\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 15041,\r\n      \"name\": \"CavMoc\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Pet - 400 Error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that Creation of Pet fails with 400 if a mandatory field is missing\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1504,\r\n    \"category\": {\r\n        \"id\": 15041,\r\n        \"name\": \"Cavoodle\"\r\n    },\r\n    \"name\": ,\r\n    \"photoUrls\": [\r\n        \"sample image\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n            \"id\": 15041,\r\n            \"name\": \"CavMoc\"\r\n        }\r\n    ],\r\n    \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Pet - 405 Error",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that trying to create a pet with incorrect method fails with 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a pet by PetID - Existing pets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://petstore.swagger.io/v2/pet',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: {\r",
							"                 \"id\": 1504,\r",
							"            \"category\": {\r",
							"                \"id\": 15041,\r",
							"                \"name\": \"Cavoodle\"\r",
							"            },\r",
							"            \"name\": \"Cavoodle-mocha\",\r",
							"            \"photoUrls\": [\r",
							"                \"sample image\"\r",
							"            ],\r",
							"            \"tags\": [\r",
							"                {\r",
							"                    \"id\": 15041,\r",
							"                    \"name\": \"CavMoc\"\r",
							"                }\r",
							"            ],\r",
							"            \"status\": \"available\"\r",
							"             }\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"    } else {\r",
							"        console.log('Pet created successfully');\r",
							"    pm.environment.set(\"createdPetResponse\", res.json());\r",
							"    //console.log(pm.environment.get(\"createdPetResponse\"));\r",
							"      pm.environment.set(\"createdPetId\", res.json().id);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify if the GET request was successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validate the returned data matches the updated details\r",
							"pm.test(\"Verify that the pet details fetched matches the details from POST/Create Pet response \", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    const createdPetDetails = pm.environment.get(\"createdPetResponse\");\r",
							"\r",
							"    pm.expect(responseBody.id).to.eql(createdPetDetails.id);\r",
							"    pm.expect(responseBody.category.id).to.eql(createdPetDetails.category.id);\r",
							"    pm.expect(responseBody.category.name).to.eql(createdPetDetails.category.name);\r",
							"    pm.expect(responseBody.name).to.eql(createdPetDetails.name);\r",
							"    pm.expect(responseBody.photoUrls).to.eql(createdPetDetails.photoUrls);\r",
							"    responseBody.tags.forEach((tag, index) => {\r",
							"        pm.expect(tag.id).to.eql(createdPetDetails.tags[index].id);\r",
							"        pm.expect(tag.name).to.eql(createdPetDetails.tags[index].name);\r",
							"    });\r",
							"    pm.expect(responseBody.status).to.eql(createdPetDetails.status);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/{{createdPetId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"{{createdPetId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a pet by PetID - Non existing pets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify that Pet not found error is thrown for a non-existing /invalid Pet ID\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message should be Pet not found\", function(){\r",
							"     const responseBody = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseBody.message).to.eql(\"Pet not found\");\r",
							"   \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/0",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Pet details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const requestBody = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"Update request was successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"updatedPetId\", pm.response.json().id);\r",
							"const updatedPetId = pm.environment.get(\"updatedPetId\");\r",
							"\r",
							"// GET request to fetch the updated pet details\r",
							"pm.sendRequest({\r",
							"    url: `https://petstore.swagger.io/v2/pet/${updatedPetId}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"}, function (err, response) {\r",
							"    // Check if the GET request was successful\r",
							"    pm.test(\"GET request was successful and should now get the updated pet details\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Validate the returned data matches the updated details\r",
							"    pm.test(\"Verify that the updated pet details matches the updated request(PUT) \", function () {\r",
							"        const responseBody = pm.response.json();\r",
							"      \r",
							"       \r",
							"        pm.expect(responseBody).to.eql(requestBody)\r",
							"        \r",
							"        console.log('Pet details are now successfully updated. New details below:');\r",
							"        console.log('ID=',responseBody.id);\r",
							"        console.log('Category ID=',responseBody.category.id);\r",
							"        console.log('Category name= :',responseBody.category.name);\r",
							"        console.log('Name=', responseBody.name);\r",
							"        console.log('photoUrl=', responseBody.photoUrls);\r",
							"         responseBody.tags.forEach(tag => {\r",
							"            console.log('Tag ID=', tag.id);\r",
							"            console.log('Tag Name=', tag.name);\r",
							"        });\r",
							"        console.log('status', responseBody.status);\r",
							"\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://petstore.swagger.io/v2/pet',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: {\r",
							"                 \"id\": 1504,\r",
							"            \"category\": {\r",
							"                \"id\": 15041,\r",
							"                \"name\": \"Cavoodle\"\r",
							"            },\r",
							"            \"name\": \"Cavoodle-mocha\",\r",
							"            \"photoUrls\": [\r",
							"                \"sample image\"\r",
							"            ],\r",
							"            \"tags\": [\r",
							"                {\r",
							"                    \"id\": 15041,\r",
							"                    \"name\": \"CavMoc\"\r",
							"                }\r",
							"            ],\r",
							"            \"status\": \"available\"\r",
							"             }\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"    } else {\r",
							"        console.log('Pet created successfully with the below details:');\r",
							"        console.log('ID=',res.json().id);\r",
							"        console.log('Category ID=',res.json().category.id);\r",
							"        console.log('Category name= :', res.json().category.name);\r",
							"        console.log('Name=', res.json().name);\r",
							"        console.log('photoUrl=', res.json().photoUrls);\r",
							"         res.json().tags.forEach(tag => {\r",
							"            console.log('Tag ID=', tag.id);\r",
							"            console.log('Tag Name=', tag.name);\r",
							"        });\r",
							"        console.log('status', res.json().status);\r",
							"               \r",
							"     // pm.environment.set(\"createdPetId\", res.json().id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1504,\r\n  \"category\": {\r\n    \"id\": 15042,\r\n    \"name\": \"Cavoodle-updated\"\r\n  },\r\n  \"name\": \"Cavoodle-Latte\",\r\n  \"photoUrls\": [\r\n    \"sample image 2\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 15042,\r\n      \"name\": \"CavMoc-updated\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a pet - existing pets",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://petstore.swagger.io/v2/pet',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: {\r",
							"                 \"id\": 1504,\r",
							"            \"category\": {\r",
							"                \"id\": 15041,\r",
							"                \"name\": \"Cavoodle\"\r",
							"            },\r",
							"            \"name\": \"Cavoodle-mocha\",\r",
							"            \"photoUrls\": [\r",
							"                \"sample image\"\r",
							"            ],\r",
							"            \"tags\": [\r",
							"                {\r",
							"                    \"id\": 15041,\r",
							"                    \"name\": \"CavMoc\"\r",
							"                }\r",
							"            ],\r",
							"            \"status\": \"available\"\r",
							"             }\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"    } else {\r",
							"        /*\r",
							"        console.log('Pet created successfully with the below details:');\r",
							"        console.log('ID=',res.json().id);\r",
							"        console.log('Category ID=',res.json().category.id);\r",
							"        console.log('Category name= :', res.json().category.name);\r",
							"        console.log('Name=', res.json().name);\r",
							"        console.log('photoUrl=', res.json().photoUrls);\r",
							"         res.json().tags.forEach(tag => {\r",
							"            console.log('Tag ID=', tag.id);\r",
							"            console.log('Tag Name=', tag.name);\r",
							"        });\r",
							"        console.log('status', res.json().status);\r",
							"               */\r",
							"      pm.environment.set(\"createdPetId\", res.json().id);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Delete request was successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"deletedPetId\", pm.response.json().message);\r",
							"const deletedPetId = pm.environment.get(\"deletedPetId\");\r",
							"\r",
							"// GET request to fetch the updated pet details\r",
							"pm.sendRequest({\r",
							"    url: `https://petstore.swagger.io/v2/pet/${deletedPetId}`,\r",
							"    method: 'GET',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"    } else {\r",
							"      const jsonData = res.json();\r",
							"            pm.test(\"Verify that GET pet details post a DELETE throws Pet not found\", function () {\r",
							"               \r",
							"                pm.expect(jsonData.code).to.eql(1);\r",
							"                pm.expect(jsonData.message).to.eql(\"Pet not found\");\r",
							"    })\r",
							"}\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/{{createdPetId}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"{{createdPetId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Pet - non existing pets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify that trying to DELETE a non-existing pet throws 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authorizationToken",
							"type": "string"
						},
						{
							"key": "value",
							"value": "special-key",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json'",
						"type": "text",
						"disabled": true
					},
					{
						"key": "api_key",
						"value": "special-key",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/546",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"546"
					]
				}
			},
			"response": []
		}
	]
}